{"version":3,"sources":["store/index.ts","api.ts","components/UserAddres/UserAddres.tsx","components/UserInfo/UserInfo.tsx","components/Comment/Comment.tsx","components/CommentsList/CommentsList.tsx","components/Post/Post.tsx","components/PostsList/PostsList.tsx","App.tsx","helpers/thunk.ts","index.tsx"],"names":["getPosts","state","posts","loadingStatus","isLoading","isLoadedStatus","isLoaded","initialState","allPosts","store","createStore","action","type","filter","post","body","includes","inputValue","title","id","postId","find","comments","comment","commentId","composeWithDevTools","applyMiddleware","thunk","getData","url","a","fetch","then","response","json","UserAddress","address","className","street","suite","city","zipcode","geo","lat","lng","UserInfo","userData","username","name","Comment","dispatch","useDispatch","href","email","onClick","removeComment","CommentsList","map","key","Post","user","PostsList","postsList","useSelector","onChange","event","currentTarget","value","placeholder","App","fullPosts","users","preperedPosts","userId","disabled","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d52dd5c.chunk.js","sourcesContent":["import { createStore, applyMiddleware, AnyAction} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport { FullPost } from '../Interfaces/Interfaces';\n\nconst SET_FULL_POSTS = 'SET_FULL_POSTS';\nconst LOADING_TOGGLE = 'LOADING_TOGGLE';\nconst FILTER = 'FILTER';\nconst IS_LOADED = 'IS_LOADED';\nconst REMOVE_POST = 'REMOVE_POST';\nconst REMOVE_COMMENT = 'REMOVE_COMMENT';\n\nexport const setPosts = (fullPosts: FullPost[]) => ({\n  type: SET_FULL_POSTS,\n  posts: fullPosts,\n})\nexport const toggleLoading = () => ({ type: LOADING_TOGGLE })\nexport const setFilter = (inputValue: string) => ({\n  type: FILTER,\n  inputValue,\n})\nexport const setIsLoaded = () => ({ type: IS_LOADED })\nexport const removePost = (id: number) => ({\n  type: REMOVE_POST,\n  postId: id,\n})\nexport const removeComment = (postId: number, commentId: number) => ({\n  type: REMOVE_COMMENT,\n  commentId,\n  postId,\n})\n\nexport const getPosts = (state: RootState) => state.posts;\nexport const loadingStatus = (state: RootState) => state.isLoading;\nexport const isLoadedStatus = ( state: RootState ) => state.isLoaded;\n\nexport type RootState = {\n  posts: FullPost[],\n  allPosts: FullPost[],\n  isLoading: boolean,\n  isLoaded: boolean,\n}\n\nconst initialState = {\n  posts: [],\n  allPosts: [],\n  isLoading: false,\n  isLoaded: false,\n}\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case 'SET_FULL_POSTS':\n      return {\n        ...state,\n        posts: action.posts,\n        allPosts: action.posts,\n      }\n\n    case 'LOADING_TOGGLE': \n      return {\n        ...state,\n        isLoading: !state.isLoading\n      }\n\n    case 'IS_LOADED':\n        return {\n          ...state,\n          isLoaded: true,\n        }\n\n    case 'FILTER':\n      return {\n        ...state,\n        posts: [...state.allPosts].filter((post: FullPost) => {\n          return post.body.includes(action.inputValue) || post.title.includes(action.inputValue);\n        }),\n      }\n\n      case 'REMOVE_POST':\n        return {\n          ...state,\n          posts: [...state.posts].filter((post: FullPost) => post.id !== action.postId)\n        }\n      \n      case 'REMOVE_COMMENT':\n        let post = state.posts.find((post: FullPost) => post.id === action.postId) as unknown as FullPost\n        post.comments = post.comments.filter(comment => comment.id !== action.commentId)\n        return {\n          ...state,\n          posts: [\n            ...state.posts,\n            post,\n          ]\n        }\n\n    default:\n      return state\n  }\n}\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","export const PostsURL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json';\nexport const UsersURL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json';\nexport const CommentsURL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json';\n\nexport const getData = async <T>(url: string): Promise<T> => (\n  fetch(url)\n    .then(response => response.json())\n);\n","import React from 'react';\nimport { Address } from '../../Interfaces/Interfaces';\n\nimport './UserAddres.scss';\n\ntype Props = {\n  address: Address;\n};\n\nexport const UserAddress: React.FC<Props> = ({ address }) => (\n  <div className=\"user__address\">\n    <span>{address.street}</span>\n    &nbsp;\n    <span>{address.suite}</span>\n    &nbsp;\n    <span>{address.city}</span>\n    &nbsp;\n    <span>{address.zipcode}</span>\n    &nbsp;\n    <span>\n      {address.geo.lat}\n      &nbsp;\n      {address.geo.lng}\n    </span>\n  </div>\n);\n","import React from 'react';\nimport { User } from '../../Interfaces/Interfaces';\nimport { UserAddress } from '../UserAddres/UserAddres';\n\nimport './UserInfo.scss';\n\ntype Props = {\n  userData: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ userData }) => (\n  <>\n    <h4 className=\"user__username\">{userData.username}</h4>\n    <p className=\"user__name\">{userData.name}</p>\n    <UserAddress address={userData.address} />\n  </>\n);\n","import React from 'react';\nimport { CommentInterface } from '../../Interfaces/Interfaces';\nimport { removeComment } from '../../store/index';\nimport { useDispatch } from 'react-redux';\n\nimport './Comment.scss';\n\ntype Props = {\n  comment: CommentInterface;\n  postId: number;\n};\n\nexport const Comment: React.FC<Props> = ({ comment, postId }) => {\n  const dispatch = useDispatch()\n\n  return (\n    <>\n      <h4 className=\"comment__name\">{comment.name}</h4>\n      <a className=\"comment__link\" href={comment.email}>{comment.email}</a>\n      <p className=\"comment__text\">{comment.body}</p>\n      <button onClick={() => dispatch(removeComment(postId, comment.id))} className=\"comment-btn\">remove comment</button>\n    </>\n  );\n}\n","import React from 'react';\nimport { CommentInterface } from '../../Interfaces/Interfaces';\n\nimport { Comment } from '../Comment/Comment';\n\nimport './CommentsList.scss';\n\ntype Props = {\n  comments: CommentInterface[];\n  postId: number;\n};\n\nexport const CommentsList: React.FC<Props> = ({ comments, postId }) => (\n  <ul className=\"comments-list\">\n    {comments.map(comment => (\n      <li key={comment.id} className=\"comment-list__item comment\">\n        <Comment comment={comment} postId={postId} />\n      </li>\n    ))}\n  </ul>\n);\n","import React from 'react';\nimport { FullPost } from '../../Interfaces/Interfaces';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { CommentsList } from '../CommentsList/CommentsList';\n\nimport { useDispatch } from 'react-redux';\nimport { removePost } from '../../store/index';\n\nimport './Post.scss';\n\ntype Props = {\n  post: FullPost;\n};\n\nexport const Post: React.FC<Props> = ({ post }) => {\n  const dispatch = useDispatch()\n\n  return (\n    <>\n      <div className=\"post\">\n        <div className=\"post__user user\">\n          <UserInfo userData={post.user} />\n        </div>\n        <div className=\"post__info\">\n          <h3 className=\"post__title\">\n            {post.title}\n          </h3>\n          <p className=\"post__text\">\n            {post.body}\n          </p>\n        </div>\n        <button onClick={() => dispatch(removePost(post.id))} className=\"post-btn\">remove post</button>\n      </div>\n      <CommentsList comments={post.comments} postId={post.id} />\n    </>\n  );\n}\n","import React from 'react';\nimport { FullPost } from '../../Interfaces/Interfaces';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter, getPosts } from '../../store/index';\n\nimport { Post } from '../Post/Post';\n\nimport './PostsList.scss';\n\ntype Props = {\n  posts: FullPost[];\n};\n\nexport const PostsList: React.FC<Props> = () => {\n  const dispatch = useDispatch();\n  const postsList = useSelector(getPosts)\n\n  return (\n    <div>\n      <input\n        type=\"textarea\"\n        onChange={(event) => dispatch(setFilter(event.currentTarget.value))}\n        className=\"filter__input\"\n        placeholder=\"Search by title or body\"\n      />\n      <ul className=\"posts-list\">\n        {postsList.map(post => (\n          <li className=\"posts-list__item\" key={post.id}>\n            <Post post={post} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getPosts,\n  loadingStatus,\n  isLoadedStatus,\n} from './store/index';\nimport { loadPosts } from './helpers/thunk';\nimport { PostsList } from './components/PostsList/PostsList';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const fullPosts = useSelector(getPosts);\n  const isLoading = useSelector(loadingStatus);\n  const isLoaded = useSelector(isLoadedStatus);\n\n  return (\n    <div className=\"App\">\n      {\n        isLoaded\n          ? <PostsList posts={fullPosts} />\n          : (\n            <button\n              className=\"btn\"\n              type=\"button\"\n              onClick={() => dispatch(loadPosts())}\n              disabled={isLoading}\n            >\n              {`${isLoading ? 'Loading...' : 'Load'}`}\n            </button>\n          )\n      }\n    </div>\n  );\n};\n\nexport default App;\n","import {\n  getData,\n  PostsURL,\n  UsersURL,\n  CommentsURL,\n} from '../api';\n\nimport {\n  setPosts,\n  toggleLoading,\n  setIsLoaded,\n} from '../store/index';\n\nimport {\n  Post,\n  User,\n  CommentInterface,\n} from '../Interfaces/Interfaces';\n\nexport const loadPosts = () => {\n  return async (dispatch: (arg0: { type: string; posts?: import(\"../Interfaces/Interfaces\").FullPost[]; }) => void) => {\n    dispatch(toggleLoading());\n    const users = await getData<User[]>(UsersURL);\n    const posts = await getData<Post[]>(PostsURL);\n    const comments = await getData<CommentInterface[]>(CommentsURL);\n    const preperedPosts = posts.map((post) => ({\n      ...post,\n      user: users.find((user) => user.id === post.userId) as User,\n      comments: comments.filter((comment) => comment.postId === post.id),\n    }));\n\n    dispatch(toggleLoading());\n    dispatch(setPosts(preperedPosts));\n    dispatch(setIsLoaded());\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store/index';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}